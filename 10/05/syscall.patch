--- ./xv6-public/gdtinfo.c	1970-01-01 03:00:00.000000000 +0300
+++ ./test/xv6-public/gdtinfo.c	2016-12-12 23:44:04.724649020 +0300
@@ -0,0 +1,28 @@
+#include "types.h"
+#include "user.h"
+
+int main()
+{
+// declarated in mmu.h header, that part of user header,
+// because need there to correct method declaration.
+struct segdesc gdt;
+user(&gdt);
+char* f = "%s %d\n"; 
+
+// Titles copied from mmu.h. Don't use cycle for readability. 
+printf(1, f, "Low bits of segment limit: ", gdt.lim_15_0);
+printf(1, f, "Low bits of segment base address: ", gdt.base_15_0);
+printf(1, f, "Middle bits of segment base address: ", gdt.base_23_16);
+printf(1, f, "Segment type (see STS_ constants): ", gdt.type);
+printf(1, f, "0 = system, 1 = application: ", gdt.s);
+printf(1, f, "Descriptor Privilege Level: ", gdt.dpl);
+printf(1, f, "Present: ", gdt.p);
+printf(1, f, "High bits of segment limit: ", gdt.lim_19_16);
+printf(1, f, "Unused (available for software use): ", gdt.avl);
+printf(1, f, "Reserved: ", gdt.rsv1);
+printf(1, f, "0 = 16-bit segment, 1 = 32-bit segment: ", gdt.db);
+printf(1, f, "Granularity: limit scaled by 4K when set: ", gdt.g);
+printf(1, f, "High bits of segment base address: ", gdt.base_31_24);
+exit();
+}
+
--- ./xv6-public/Makefile	2016-12-12 21:26:52.948339028 +0300
+++ ./test/xv6-public/Makefile	2016-12-12 22:54:19.132536589 +0300
@@ -173,7 +173,7 @@
 	_usertests\
 	_wc\
 	_zombie\
-
+	_gdtinfo
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -243,7 +243,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c gdtinfo.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
--- ./xv6-public/syscall.c	2015-08-07 16:50:43.951097411 +0300
+++ ./test/xv6-public/syscall.c	2016-12-12 21:40:00.836368698 +0300
@@ -98,6 +98,7 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_user(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +122,7 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_user]    sys_user,
 };
 
 void
--- ./xv6-public/syscall.h	2015-08-07 16:50:43.951097411 +0300
+++ ./test/xv6-public/syscall.h	2016-12-12 21:42:22.504374033 +0300
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_user   22
--- ./xv6-public/sysproc.c	2015-08-07 16:50:43.951097411 +0300
+++ ./test/xv6-public/sysproc.c	2016-12-12 23:44:19.708649584 +0300
@@ -89,3 +89,16 @@
   release(&tickslock);
   return xticks;
 }
+
+
+int
+sys_user(void)
+{
+// look declaration in user.h 
+ struct segdesc *gdt;
+//allocate memory 
+ if(argptr(0, (void*)&gdt, sizeof(*gdt)) < 0)
+ 	return -1;
+ *gdt = cpu->gdt[1];
+ return 0;
+}
--- ./xv6-public/user.h	2015-08-07 16:50:43.951097411 +0300
+++ ./test/xv6-public/user.h	2016-12-12 22:58:29.052546000 +0300
@@ -1,3 +1,4 @@
+#include "mmu.h"
 struct stat;
 struct rtcdate;
 
@@ -23,6 +24,7 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int user(struct segdesc*);
 
 // ulib.c
 int stat(char*, struct stat*);
--- ./xv6-public/usys.S	2015-08-07 16:50:43.951097411 +0300
+++ ./test/xv6-public/usys.S	2016-12-12 21:51:26.436394517 +0300
@@ -29,3 +29,4 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(user)
